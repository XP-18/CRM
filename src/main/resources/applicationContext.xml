<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--    spring 配置文件 声明service dao 工具类配置文件-->
    <context:component-scan base-package="top.xp18.crm.settings.service.impl"/>
    <context:component-scan base-package="top.xp18.crm.workbench.service"/>
    <context:component-scan base-package="top.xp18.crm.exception"/>
    <!--    声明数据源，连接数据库 首先声明文件位置-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--    声明SqlSessionFactoryBean创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>
    <!--    声明mybatis的扫描器，创建dao对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="top.xp18.crm.workbench.dao,top.xp18.crm.settings.dao"/>
    </bean>
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--    事务通知，切面，要将事务织入哪些方法-->
    <tx:advice id="myadvice" transaction-manager="dataSourceTransactionManager">
        <!--    事务属性-->
        <tx:attributes>
            <!--        name可以使用通配符匹配多个方法-->
            <tx:method name="sale" isolation="DEFAULT" read-only="false"
                       rollback-for="top.xp18.exce.NotEnoughException,java.lang.NullPointerException"
                       propagation="REQUIRED"/>
            <!--        增加方法-->
            <tx:method name="add*"/>
            <!--        删除方法-->
            <tx:method name="remove*"/>
            <!--        查询方法，有find，query，search，不满足上面则用这个-->
            <tx:method name="*" />
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>

        </tx:attributes>
    </tx:advice>
    <!--通知切入点
        也就是说哪些包哪些类需要使用事务
    -->
    <aop:config>
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--        当execution中的方法可以和advice中的方法匹配就执行事务-->
        <aop:advisor advice-ref="myadvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>